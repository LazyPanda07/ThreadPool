name: CI


on:
  workflow_dispatch:
  push:
    branches: [master, dev]


jobs:
  windows-build:
    runs-on: windows-latest
    strategy:
      matrix:
        configuration: [Debug, DebugDLL, Release, ReleaseDLL]

    steps:
    - uses: actions/checkout@v4

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@main

    - name: Build
      run: msbuild /p:Configuration=${{ matrix.configuration }} /p:Platform=x64

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.configuration }}_Windows
        path: bin\${{ matrix.configuration }}-x64\ThreadPool
      

  linux-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        configuration: [Debug, DebugDLL, Release, ReleaseDLL]

    steps:
      - uses: actions/checkout@v4

      - name: Setup build type
        shell: pwsh
        run: echo "BUILD_TYPE=$(if ("${{ matrix.configuration }}".Contains("Release")) { echo "Release" } else { echo "Debug" })" >> $Env:GITHUB_ENV

      - name: Get vs_to_cmake
        uses: actions/checkout@v4
        with: 
          repository: LazyPanda07/vs_to_cmake
          path: vs_to_cmake
          ref: dev

      - name: Install vs_to_cmake
        run: pip3 install $(pwd)/vs_to_cmake/

      - name: Create CMakeLists.txt
        run: vs_to_cmake -f ThreadPool.vcxproj -d __LINUX__
        
      - name: Build
        run: |
            mkdir build
            cd build
            cmake -DVS_BUILD_CONFIGURATION=${{ matrix.configuration }} -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} ..
            make install -j  $(nproc)

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.configuration }}_Linux
          path: bin/${{ matrix.configuration }}-x64/ThreadPool
  

  windows-tests:
    runs-on: windows-latest
    needs: [windows-build]
    strategy:
      matrix:
        configuration: [Debug, DebugDLL, Release, ReleaseDLL]

    steps: 
    - uses: actions/checkout@v4
   
    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@main

    - name: Setup GoogleTest configuration
      run: echo "GOOGLE_TEST_CONFIGURATION=$(if ("${{ matrix.configuration }}".Contains("Release")) { echo "Release" } else { echo "Debug" })" >> $Env:GITHUB_ENV

    - name: Build GoogleTest
      run: |
          git clone https://github.com/google/googletest.git -b v1.14.x gtest
          cd gtest
          mkdir build
          cd build
          cmake -Dgtest_force_shared_crt=ON -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}\Tests\gtest ..
          msbuild /p:Configuration=${{ env.GOOGLE_TEST_CONFIGURATION }} /p:Platform=x64 INSTALL.vcxproj

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.configuration }}_Windows
        path: ThreadPool
        
    - name: Tests
      working-directory: ${{ github.workspace }}\Tests
      run: |
          msbuild /p:Configuration=${{ env.GOOGLE_TEST_CONFIGURATION }} /p:Platform=x64
          .\bin\${{ env.GOOGLE_TEST_CONFIGURATION }}-x64\Tests\Tests.exe

  
  linux-tests:
    runs-on: ubuntu-latest
    needs: [linux-build]
    strategy:
      matrix:
        configuration: [Debug, DebugDLL, Release, ReleaseDLL]

    steps: 
    - uses: actions/checkout@v4

    - name: Setup GoogleTest configuration
      shell: pwsh
      run: echo "GOOGLE_TEST_CONFIGURATION=$(if ("${{ matrix.configuration }}".Contains("Release")) { echo "Release" } else { echo "Debug" })" >> $Env:GITHUB_ENV

    - name: Build GoogleTest
      run: |
          git clone https://github.com/google/googletest.git -b v1.14.x gtest
          cd gtest
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/Tests/gtest ..
          make install -j  $(nproc)

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.configuration }}_Linux
        path: ThreadPool
        
    - name: Tests
      working-directory: ${{ github.workspace }}/Tests
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DVS_BUILD_CONFIGURATION=${{ env.GOOGLE_TEST_CONFIGURATION }} ..
          make install -j  $(nproc)
          cd ../bin/${{ env.GOOGLE_TEST_CONFIGURATION }}-x64/Tests/
          export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:$(pwd)
          ./Tests
  
      
  memory-leak-tests:
    runs-on: ubuntu-latest
    needs: [linux-build]
    strategy:
      matrix:
        configuration: [Debug, DebugDLL, Release, ReleaseDLL]

    steps: 
    - uses: actions/checkout@v4

    - name: Install valgrind
      run: sudo apt install valgrind -y

    - name: Setup GoogleTest configuration
      shell: pwsh
      run: echo "GOOGLE_TEST_CONFIGURATION=$(if ("${{ matrix.configuration }}".Contains("Release")) { echo "Release" } else { echo "Debug" })" >> $Env:GITHUB_ENV

    - name: Build GoogleTest
      run: |
          git clone https://github.com/google/googletest.git -b v1.14.x gtest
          cd gtest
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/Tests/gtest ..
          make install -j  $(nproc)

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.configuration }}_Linux
        path: ThreadPool
        
    - name: Tests
      working-directory: ${{ github.workspace }}/Tests
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DVS_BUILD_CONFIGURATION=${{ env.GOOGLE_TEST_CONFIGURATION }} -DVALGRIND=ON ..
          make install -j  $(nproc)
          cd ../bin/${{ env.GOOGLE_TEST_CONFIGURATION }}-x64/Tests/
          export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:$(pwd)
          valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes --verbose --log-file=leaks_result.txt ./Tests
          
    - name: Valgrid result
      working-directory: ${{ github.workspace }}/Tests
      run: |
          cd bin/${{ env.GOOGLE_TEST_CONFIGURATION }}-x64/Tests/
          export VALGRIND_RESULT=$(grep -Rnw 'leaks_result.txt' -e 'All heap blocks were freed -- no leaks are possible')
          
          