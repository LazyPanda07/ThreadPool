name: CI


on:
  workflow_dispatch:
  push:
    branches: [master, dev]


jobs:
  windows-build:
    runs-on: windows-latest
    strategy:
      matrix:
        configuration: [Debug, Release]
        shared: [[ON, DLL], [OFF, ""]]

    steps:
    - uses: actions/checkout@v4

    - name: Enable NMake
      uses: ilammy/msvc-dev-cmd@v1.13.0

    - name: Build
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} -DBUILD_SHARED_LIBS=${{ matrix.shared[0] }} -G "NMake Makefiles" ..
          nmake install

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.configuration }}${{ matrix.shared[1] }}_Windows
        path: build/install-dir
      

  linux-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        configuration: [Debug, Release]
        shared: [[ON, DLL], [OFF, ""]]

    steps:
      - uses: actions/checkout@v4

      - name: Build
        run: |
            mkdir build
            cd build
            cmake -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} -DBUILD_SHARED_LIBS=${{ matrix.shared[0] }} ..
            make install -j $(nproc)

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.configuration }}${{ matrix.shared[1] }}_Linux
          path: build/install-dir
  

  windows-tests:
    runs-on: windows-latest
    needs: [windows-build]
    strategy:
      matrix:
        configuration: [Debug, Release]
        shared: [[ON, DLL], [OFF, ""]]

    steps: 
    - uses: actions/checkout@v4
   
    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@main
    
    - name: Enable NMake
      uses: ilammy/msvc-dev-cmd@v1.13.0

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.configuration }}${{ matrix.shared[1] }}_Windows
        path: ThreadPool

    - name: Get Google Tests
      uses: LazyPanda07/get-gtest@v1
      with:
        install-path: Tests/gtest
        build-type: ${{ matrix.configuration }}
        
    - name: Tests
      working-directory: ${{ github.workspace }}\Tests
      run: |
          msbuild /p:Configuration=${{ matrix.configuration }} /p:Platform=x64
          .\bin\${{ matrix.configuration }}-x64\Tests\Tests.exe

  
  linux-tests:
    runs-on: ubuntu-latest
    needs: [linux-build]
    strategy:
      matrix:
        configuration: [Debug, Release]
        shared: [[ON, DLL], [OFF, ""]]

    steps: 
    - uses: actions/checkout@v4

    - name: Get Google Tests
      uses: LazyPanda07/get-gtest@v1
      with:
        install-path: Tests/gtest

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.configuration }}${{ matrix.shared[1] }}_Linux
        path: ThreadPool
        
    - name: Tests
      working-directory: ${{ github.workspace }}/Tests
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release ..
          make install -j $(nproc)
          cd ../build/
          export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:$(pwd)
          ./Tests
  
      
  memory-leak-tests:
    runs-on: ubuntu-latest
    needs: [linux-build]
    strategy:
      matrix:
        configuration: [Debug, DebugDLL, Release, ReleaseDLL]

    steps: 
    - uses: actions/checkout@v4

    - name: Install valgrind
      run: sudo apt install valgrind -y

    - name: Setup GoogleTest configuration
      shell: pwsh
      run: echo "GOOGLE_TEST_CONFIGURATION=$(if ("${{ matrix.configuration }}".Contains("Release")) { echo "Release" } else { echo "Debug" })" >> $Env:GITHUB_ENV

    - name: Build GoogleTest
      run: |
          git clone https://github.com/google/googletest.git -b v1.14.x gtest
          cd gtest
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/Tests/gtest ..
          make install -j $(nproc)

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.configuration }}_Linux
        path: ThreadPool
        
    - name: Tests
      working-directory: ${{ github.workspace }}/Tests
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DVS_BUILD_CONFIGURATION=${{ env.GOOGLE_TEST_CONFIGURATION }} -DVALGRIND=ON ..
          make install -j $(nproc)
          cd ../bin/${{ env.GOOGLE_TEST_CONFIGURATION }}-x64/Tests/
          export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:$(pwd)
          valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes --verbose --log-file=leaks_result.txt ./Tests
          
    - name: Valgrid result
      working-directory: ${{ github.workspace }}/Tests
      run: |
          cd bin/${{ env.GOOGLE_TEST_CONFIGURATION }}-x64/Tests/
          export VALGRIND_RESULT=$(grep -Rnw 'leaks_result.txt' -e 'All heap blocks were freed -- no leaks are possible')
          printf '#!/bin/bash\n\ncat leaks_result.txt\n\nif [[ -z "${VALGRIND_RESULT}" ]];\nthen\n    exit 1\nfi\n' > check.sh
          chmod +x check.sh
          ./check.sh
          